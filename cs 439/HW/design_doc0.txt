################
YOUR INFO
################
Name1:Seung Yoo   
EID1:sky274
CS login:sky274
Email:yook94@yahoo.com
Unique Number:51095

Slip days used: 0

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1:Vincent Chow
EID1:vyc232
CS login:vinchow
Email:chow_vincent@utexas.edu
Unique Number:51095

Your partner's ranking (scale below): Satisfactory

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.


################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.

  14 child processes

    Process 14: 1
    Process 13: 1
    Process 12: 1
    Process 11: 0
    Process 10: 1
    Process 9: 1
    Process 8: 0
    Process 7: 1
    Process 6: 1
    Process 5: 0
    Process 4: 2
    Process 3: 1
    Process 2: 2
    Process 1: 3
    Process 0: 5


(2) In part 0.3, which flavor of exec did you choose to use?  Why?

    We decided to use the execve() function. We had access to the filename(argv[0]) and the argument(argv) to pass into any type of exec function. There was a global variable already given to us called environ which is used to specify the environment the new process is going to run in. So it was logical to use execve().


################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?

    The sigaction() system call is used to change the action taken by a process on receipt of a specific signal. We use this system call because we had to implement the handler to take certain actions when signaled with certain signals.

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)

    0x000000000040099a <+64>: callq  0x400800 <exit@plt>

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?

    0x0000000000400800 <+0>:  jmpq   *0x201872(%rip)

(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?

   0x0000000000400800 <+0>: jmpq   *0x201872(%rip)        # 0x602078 <exit@got.plt>
   0x0000000000400806 <+6>: pushq  $0xc
   0x000000000040080b <+11>:  jmpq   0x400730



################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.

    There is no significant advantage in seperating the three signal handlers. Only problem is that the signal handler method would get significantly bigger and would be harder to understand what the method is doing when recieving different types of signals.