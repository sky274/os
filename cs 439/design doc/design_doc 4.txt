                    +-------------------------+
                    |           CS 439        |
                    | PROJECT 4: FILE SYSTEMS |
                    |      DESIGN DOCUMENT    |
                    +-------------------------+

****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name:Seung Yoo
EID:sky274
CS login:sky274
Email:yook94@yahoo.com
Unique Number:51875

Slip days used on this project:

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1:Scott Munro
EID1:snm2232
CS login:scottnm
Email:scottnm@utexas.edu
Unique Number:51860
Ranking (scale below):very good

Name2:Darren Sadr
EID2:ss65728
CS login:darrenvx
Email:darrenvx@cs.utexas.edu
Unique Number:5180
Ranking (scale below):very good

Name3:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up and/or rarely prepared.

>> Deficient: Often failed to show up and/or rarely prepared.

>> Unsatisfactory: Consistently failed to show up and/or unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.




---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or/Users/yook94
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk
  {
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    block_sector_t direct[LEVEL0];       /* direct pointers */
    block_sector_t first;              /* first level indirected pointers */
    block_sector_t second;               /* second level indirected pointers */
    unsigned isdir;                         /* indicates if the inode_disk is a directory */
}

/* In-memory inode. */
struct inode
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    struct inode_disk data;             /* Inode content. */
  };




>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

(123 + 128 + 128 * 128)* 512= 8.5M
We have 123 direct sectors, 1 single indirect block and 1 double indirect block.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

	We didn’t have time to actually implement synchronization. If we did have time,
we would have had semaphore for extending files. While a file is being extended, I would down
the semaphore so that another process cannot come in and extend the file at the same time. 
Writing past the eof happens in inode_write_at function so semaphore should be used there.
Writing and reading before the eof should be fine. 

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

	In our code, process A would not be able to read the changes while process B
is writing to the same file. In order for this to happen, we keep the length of file F as
the original length until process B finishes writing or extending the file. process A thinks
that file F is still the original because the information hasn’t been updated. 

	

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

	Reader and writer problem here. In our code, Readers can never block other readers. 
multiple processes are able to read the same file concurrently. Writers can block other readers and
writers when it is performing file extension. Two processes shouldn’t try to extend the file at
the same time and a process shouldn’t be able to read the file when it is in middle of extension.
So we completely lock down the file extension using a semaphore so no other processes can mess with it.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

	Our inode structure is multilevel indexed. We have direct index , single indirection and
double indirection. Main factor we accounted for was ease of access. If we just have double indirection,
it will have enough size for large files but for small files, it would take longer to access. So we
used direct blocks and single indirection block to account for small size files so that it has much
faster access time.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct dir* cwd; /* current working directory */ 


struct inode_disk
  {
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    block_sector_t direct[LEVEL0];       /* direct pointers */
    block_sector_t first;              /* first level indirected pointers */
    block_sector_t second;               /* second level indirected pointers */
    unsigned isdir;                         /* indicates if the inode_disk is a directory */
}

/* In-memory inode. */
struct inode
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    struct inode_disk data;             /* Inode content. */
  };

	

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

	In our code, relative path and absolute path traversal does not differ. 
This is because we turn every relative path into an absolute path by appending the directories path
to the front of given relative path.

	We created the function dir_abspath() to perform this operation. 

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

	In our syscall.c, We have different handlers for deleting and creating new files. These
functions are locked up using our filesys_lock. So two files with the same name cannot be created
and files cannot be deleted twice simultaneously.  

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?
	
	No we don't allow that. We prevent it by checking if the directory to be removed is 
the current working directory through its sector number or if it's open count is greater than 2.
This is in our filesys_remove() function.
	

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

	We represent our current working directory as a dir*. Our directory struct has a pointer
to the in ode struct so it made sense for us to use a dir* to represent our current working directory.
Inode struct has all the information we need to figure out the location and other things about a directory.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?